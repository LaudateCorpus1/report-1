package com.atlassian.performance.tools.report.distribution

import org.hamcrest.Matchers.*
import org.junit.Assert.assertThat
import org.junit.Test

class QuantileFunctionTest {

    private val addCommentLatencies = listOf(
        1342,
        1148,
        1701,
        1932,
        1885,
        1156,
        1360,
        1878,
        1131,
        1787,
        1186,
        1683,
        1758,
        1823,
        1773,
        1200,
        1769,
        1257,
        1702,
        1760,
        1734,
        1229,
        1377,
        1888,
        1852,
        1162,
        1348,
        1582,
        1800,
        1086,
        2949
    )

    @Test
    fun shouldPlot() {
        val actualQuantiles = QuantileFunction().plot(addCommentLatencies)

        val expectedQuantiles = listOf(
            Quantile(0.00, 1086.0),
            Quantile(0.01, 1086.0),
            Quantile(0.02, 1086.0),
            Quantile(0.03, 1086.0),
            Quantile(0.04, 1131.0),
            Quantile(0.05, 1131.0),
            Quantile(0.06, 1131.0),
            Quantile(0.07, 1148.0),
            Quantile(0.08, 1148.0),
            Quantile(0.09, 1148.0),
            Quantile(0.10, 1156.0),
            Quantile(0.11, 1156.0),
            Quantile(0.12, 1156.0),
            Quantile(0.13, 1162.0),
            Quantile(0.14, 1162.0),
            Quantile(0.15, 1162.0),
            Quantile(0.16, 1162.0),
            Quantile(0.17, 1186.0),
            Quantile(0.18, 1186.0),
            Quantile(0.19, 1186.0),
            Quantile(0.20, 1200.0),
            Quantile(0.21, 1200.0),
            Quantile(0.22, 1200.0),
            Quantile(0.23, 1229.0),
            Quantile(0.24, 1229.0),
            Quantile(0.25, 1229.0),
            Quantile(0.26, 1257.0),
            Quantile(0.27, 1257.0),
            Quantile(0.28, 1257.0),
            Quantile(0.29, 1257.0),
            Quantile(0.30, 1342.0),
            Quantile(0.31, 1342.0),
            Quantile(0.32, 1342.0),
            Quantile(0.33, 1348.0),
            Quantile(0.34, 1348.0),
            Quantile(0.35, 1348.0),
            Quantile(0.36, 1360.0),
            Quantile(0.37, 1360.0),
            Quantile(0.38, 1360.0),
            Quantile(0.39, 1377.0),
            Quantile(0.40, 1377.0),
            Quantile(0.41, 1377.0),
            Quantile(0.42, 1582.0),
            Quantile(0.43, 1582.0),
            Quantile(0.44, 1582.0),
            Quantile(0.45, 1582.0),
            Quantile(0.46, 1683.0),
            Quantile(0.47, 1683.0),
            Quantile(0.48, 1683.0),
            Quantile(0.49, 1701.5),
            Quantile(0.50, 1701.5),
            Quantile(0.51, 1701.5),
            Quantile(0.52, 1701.5),
            Quantile(0.53, 1701.5),
            Quantile(0.54, 1701.5),
            Quantile(0.55, 1734.0),
            Quantile(0.56, 1734.0),
            Quantile(0.57, 1734.0),
            Quantile(0.58, 1734.0),
            Quantile(0.59, 1758.0),
            Quantile(0.60, 1758.0),
            Quantile(0.61, 1758.0),
            Quantile(0.62, 1760.0),
            Quantile(0.63, 1760.0),
            Quantile(0.64, 1760.0),
            Quantile(0.65, 1769.0),
            Quantile(0.66, 1769.0),
            Quantile(0.67, 1769.0),
            Quantile(0.68, 1773.0),
            Quantile(0.69, 1773.0),
            Quantile(0.70, 1773.0),
            Quantile(0.71, 1787.0),
            Quantile(0.72, 1787.0),
            Quantile(0.73, 1787.0),
            Quantile(0.74, 1787.0),
            Quantile(0.75, 1800.0),
            Quantile(0.76, 1800.0),
            Quantile(0.77, 1800.0),
            Quantile(0.78, 1823.0),
            Quantile(0.79, 1823.0),
            Quantile(0.80, 1823.0),
            Quantile(0.81, 1852.0),
            Quantile(0.82, 1852.0),
            Quantile(0.83, 1852.0),
            Quantile(0.84, 1878.0),
            Quantile(0.85, 1878.0),
            Quantile(0.86, 1878.0),
            Quantile(0.87, 1878.0),
            Quantile(0.88, 1885.0),
            Quantile(0.89, 1885.0),
            Quantile(0.90, 1885.0),
            Quantile(0.91, 1888.0),
            Quantile(0.92, 1888.0),
            Quantile(0.93, 1888.0),
            Quantile(0.94, 1932.0),
            Quantile(0.95, 1932.0),
            Quantile(0.96, 1932.0),
            Quantile(0.97, 2949.0),
            Quantile(0.98, 2949.0),
            Quantile(0.99, 2949.0),
            Quantile(1.00, 2949.0)
        )
        assertThat(actualQuantiles, equalTo(expectedQuantiles))
    }

    @Test
    fun shouldPlotPercentile32() {
        val data = listOf(
            18054,
            17548,
            17350,
            17860,
            17827,
            17653,
            18113,
            18405,
            17746,
            17647,
            18160,
            17955,
            17705,
            17890,
            17974,
            17857,
            13287,
            18645,
            17775,
            17730,
            17996,
            18263,
            17861,
            17161,
            17717,
            18134,
            18669,
            18340,
            17221,
            18292,
            18146,
            17520,
            18207,
            17829,
            18206,
            13301,
            18257,
            17626,
            18358,
            18340,
            18320,
            17852,
            17804,
            17577,
            17718,
            18099,
            13395,
            17763,
            17911,
            17978,
            12935,
            17519,
            17550,
            18728,
            18518,
            17698,
            18739,
            18553,
            17982,
            18113,
            17974,
            17961,
            17645,
            17867,
            17890,
            17498,
            18718,
            18191,
            18177,
            17923,
            18164,
            18155,
            6212,
            5961,
            711
        )

        val quantiles = QuantileFunction().plot(data)

        val p31 = quantiles[31].value
        val p32 = quantiles[32].value
        val p33 = quantiles[33].value
        assertThat(p32, greaterThanOrEqualTo(p31))
        assertThat(p32, lessThanOrEqualTo(p33))
    }
}